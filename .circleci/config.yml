##
# Python CircleCI 2.0 configuration file
#
version: 2.1

commands:
  aws-alpine:
    description: install aws-cli on alpine distros
    steps:
      - run:
          name: install aws-cli
          command: |
            apk update 
            apk add curl zip unzip
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws


workflows:
  flask:
    jobs:
      #- build
      #- dockerize:
      #    requires: [build]
      #- provision:
      #   requires: [dockerize]
      - update
      #   requires: [provision]

jobs:
  build:
    docker:
      - image: python:3.7.3-stretch

    working_directory: /app

    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            #pip install -r requirements.txt
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x /bin/hadolint

      - run:
          name: run lint
          command: |
            make lint

  dockerize:
    machine: true
    environment:
      ecr: 135834287615.dkr.ecr.eu-west-2.amazonaws.com
    steps:
      - checkout
      - run:
          name: install aws
          command: sudo apt update && sudo apt install awscli -y
      - run: |
          pass=$(aws ecr get-login | sed 's/-e none//g')
          $pass
          docker build -t ${ecr}/flask:${CIRCLE_WORKFLOW_ID:0:6} .
          docker push ${ecr}/flask:${CIRCLE_WORKFLOW_ID:0:6}

  provision:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - aws-alpine
      - run: 
          name: create cluster
          command: |
            aws cloudformation deploy --template-file eks/cluster.yaml \
             --stack-name eks --tags version=${CIRCLE_WORKFLOW_ID:0:6} \
             --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
          no_output_timeout: 12m

  update:
    docker:
      - image: python:3.7-alpine3.11
    environment:
      #kss: s3://capstone-cluster
      cn: capstone-cluster
    steps:
      - checkout
      - aws-alpine
      #- run:
      #    name: install kops
      #    command: |
      #      curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
      #      chmod +x kops-linux-amd64
      #      mv kops-linux-amd64 /usr/bin/kops
      #      kops version
      #      kops --state $kss export kubecfg $cn --admin
      #- run:
      #    name: wait for cluster to be healthy
      #    command: aws cloudformation wait stack-create-complete --stack-name eks

      - run:
          name: configure kubectl context
          command: aws eks --region eu-west-2 update-kubeconfig --name $cn

      - run:
          name: install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.20.9/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/bin/kubectl
            #export KUBECONFIG=~/.kube/config
            kubectl version 

      - run:
          name: create new Deployment
          command: kubectl set image deployment/flask-app flask=135834287615.dkr.ecr.eu-west-2.amazonaws.com/flask:1e14df --record #${CIRCLE_WORKFLOW_ID:0:6} --record

      - run:
          name: get service LoadBalancer
          command: kubectl get svc |  grep eu-west | cut -d " " -f 10